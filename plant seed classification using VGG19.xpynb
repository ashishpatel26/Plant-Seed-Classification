{
  "cells": [
    {
      "metadata": {
        "_uuid": "fb081ca8bc61f4bb87b826ba199f1ca02f34d225"
      },
      "cell_type": "markdown",
      "source": "<h1 id=\"Use-Keras-Pretrained-Models-dataset\">1. Use Keras Pretrained Models dataset<a class=\"anchor-link\" href=\"#Use-Keras-Pretrained-Models-dataset\" target=\"_self\">Â¶</a></h1><p>Kernels can't use network connection to download pretrained keras model weights.\nThis dataset helps you to apply your favorite pretrained model in the Kaggle Kernel environment. \nYou can find more details <a href=\"https://www.kaggle.com/gaborfodor/keras-pretrained-models\" target=\"_top\">here</a>.</p>\n<p>We have to copy the pretrained models to the cache directory (~/.keras/models) where keras is looking for them.</p>"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "f7a700b03cb8024e38e9abd097322f36ff241ee1"
      },
      "cell_type": "code",
      "source": "# !ls ../input/vgg19/",
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": "imagenet_class_index.json\r\nvgg19_weights_tf_dim_ordering_tf_kernels.h5\r\nvgg19_weights_tf_dim_ordering_tf_kernels_notop.h5\r\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "c5c737c05fd17ffa58ec296f1a6963f90292a587",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "# import os\n# cache_dir = os.path.expanduser(os.path.join('~', '.keras'))\n# if not os.path.exists(cache_dir):\n#     os.makedirs(cache_dir)\n# models_dir = os.path.join(cache_dir, 'models')\n# if not os.path.exists(models_dir):\n#     os.makedirs(models_dir)",
      "execution_count": 2,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ee181f6636b49bb032a6af2387cb45747f5daf0b",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "# !cp ../input/vgg19/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5 ~/.keras/models/",
      "execution_count": 3,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "92c521d021600ed77eace646db2b5b657406e079"
      },
      "cell_type": "code",
      "source": "print(os.listdir('../input/plant-seedlings-classification/train/'))",
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": "['Maize', 'Fat Hen', 'Common Chickweed', 'Cleavers', 'Charlock', 'Loose Silky-bent', 'Small-flowered Cranesbill', 'Black-grass', 'Scentless Mayweed', 'Sugar beet', 'Common wheat', 'Shepherds Purse']\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "dbc0a7f8f1a4546ee0c1fde0913df1a50ea24628"
      },
      "cell_type": "code",
      "source": "import fnmatch\nimport os\nimport numpy as np\nimport pandas as pd\nfrom keras.applications.vgg19 import preprocess_input\nfrom keras.preprocessing import image\nnp.random.seed(21)\n\npath = '../input/plant-seedlings-classification/train/'\ntrain_label = []\ntrain_img = []\nlabel2num = {'Loose Silky-bent':0, 'Charlock':1, 'Sugar beet':2, 'Small-flowered Cranesbill':3,\n             'Common Chickweed':4, 'Common wheat':5, 'Maize':6, 'Cleavers':7, 'Scentless Mayweed':8,\n             'Fat Hen':9, 'Black-grass':10, 'Shepherds Purse':11}\nfor i in os.listdir(path):\n    label_number = label2num[i]\n    new_path = path+i+'/'\n    for j in fnmatch.filter(os.listdir(new_path), '*.png'):\n        temp_img = image.load_img(new_path+j, target_size=(224,224))\n        train_label.append(label_number)\n        temp_img = image.img_to_array(temp_img)\n        train_img.append(temp_img)\n\ntrain_img = np.array(train_img)\n\ntrain_y=pd.get_dummies(train_label)\ntrain_y = np.array(train_y)\ntrain_img=preprocess_input(train_img)\n\nprint('Training data shape: ', train_img.shape)\nprint('Training labels shape: ', train_y.shape)",
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": "/opt/conda/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n  from ._conv import register_converters as _register_converters\nUsing TensorFlow backend.\n",
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": "Training data shape:  (4750, 224, 224, 3)\nTraining labels shape:  (4750, 12)\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "34b8442bd17bd8e0c1fc0869a80ffffec14d2b68"
      },
      "cell_type": "code",
      "source": "import keras\nfrom keras.models import Sequential,Model\nfrom keras.layers import Dense, Dropout, Flatten, Activation\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.applications.vgg19 import VGG19\n\ndef vgg19_model(num_classes=None):\n\n    model = VGG19(weights='imagenet', include_top=False,input_shape=(224,224,3))\n    model.layers.pop()\n    model.layers.pop()\n    model.layers.pop()\n\n    model.outputs = [model.layers[-1].output]\n\n    model.layers[-2].outbound_nodes= []\n    x=Conv2D(256, kernel_size=(2,2),strides=2)(model.output)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)    \n    x=Conv2D(128, kernel_size=(2,2),strides=1)(x)\n    x = BatchNormalization()(x)\n    x = Activation('relu')(x)\n    x=Flatten()(x)\n    x=Dense(num_classes, activation='softmax')(x)\n\n    model=Model(model.input,x)\n\n    for layer in model.layers[:15]:\n\n        layer.trainable = False\n\n\n    return model",
      "execution_count": 6,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "8ee3a2a961051c2c6be00148756123253184a69f"
      },
      "cell_type": "code",
      "source": "def precision(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n    precision = true_positives / (predicted_positives + K.epsilon())\n    return precision\n\n\ndef recall(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n    recall = true_positives / (possible_positives + K.epsilon())\n    return recall\n\n\ndef fscore(y_true, y_pred):\n    if K.sum(K.round(K.clip(y_true, 0, 1))) == 0:\n        return 0\n\n    p = precision(y_true, y_pred)\n    r = recall(y_true, y_pred)\n    f_score = 2 * (p * r) / (p + r + K.epsilon())\n    return f_score",
      "execution_count": 7,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "b75c616941d39ffb3884172f9ee5e889e9293698"
      },
      "cell_type": "code",
      "source": "from keras import backend as K\nnum_classes=12\nmodel = vgg19_model(num_classes)\nmodel.compile(optimizer=\"nadam\", loss='categorical_crossentropy', metrics=['accuracy',fscore])\nmodel.summary()",
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "text": "_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ninput_1 (InputLayer)         (None, 224, 224, 3)       0         \n_________________________________________________________________\nblock1_conv1 (Conv2D)        (None, 224, 224, 64)      1792      \n_________________________________________________________________\nblock1_conv2 (Conv2D)        (None, 224, 224, 64)      36928     \n_________________________________________________________________\nblock1_pool (MaxPooling2D)   (None, 112, 112, 64)      0         \n_________________________________________________________________\nblock2_conv1 (Conv2D)        (None, 112, 112, 128)     73856     \n_________________________________________________________________\nblock2_conv2 (Conv2D)        (None, 112, 112, 128)     147584    \n_________________________________________________________________\nblock2_pool (MaxPooling2D)   (None, 56, 56, 128)       0         \n_________________________________________________________________\nblock3_conv1 (Conv2D)        (None, 56, 56, 256)       295168    \n_________________________________________________________________\nblock3_conv2 (Conv2D)        (None, 56, 56, 256)       590080    \n_________________________________________________________________\nblock3_conv3 (Conv2D)        (None, 56, 56, 256)       590080    \n_________________________________________________________________\nblock3_conv4 (Conv2D)        (None, 56, 56, 256)       590080    \n_________________________________________________________________\nblock3_pool (MaxPooling2D)   (None, 28, 28, 256)       0         \n_________________________________________________________________\nblock4_conv1 (Conv2D)        (None, 28, 28, 512)       1180160   \n_________________________________________________________________\nblock4_conv2 (Conv2D)        (None, 28, 28, 512)       2359808   \n_________________________________________________________________\nblock4_conv3 (Conv2D)        (None, 28, 28, 512)       2359808   \n_________________________________________________________________\nblock4_conv4 (Conv2D)        (None, 28, 28, 512)       2359808   \n_________________________________________________________________\nblock4_pool (MaxPooling2D)   (None, 14, 14, 512)       0         \n_________________________________________________________________\nblock5_conv1 (Conv2D)        (None, 14, 14, 512)       2359808   \n_________________________________________________________________\nblock5_conv2 (Conv2D)        (None, 14, 14, 512)       2359808   \n_________________________________________________________________\nblock5_conv3 (Conv2D)        (None, 14, 14, 512)       2359808   \n_________________________________________________________________\nblock5_conv4 (Conv2D)        (None, 14, 14, 512)       2359808   \n_________________________________________________________________\nblock5_pool (MaxPooling2D)   (None, 7, 7, 512)         0         \n_________________________________________________________________\nconv2d_1 (Conv2D)            (None, 3, 3, 256)         524544    \n_________________________________________________________________\nbatch_normalization_1 (Batch (None, 3, 3, 256)         1024      \n_________________________________________________________________\nactivation_1 (Activation)    (None, 3, 3, 256)         0         \n_________________________________________________________________\nconv2d_2 (Conv2D)            (None, 2, 2, 128)         131200    \n_________________________________________________________________\nbatch_normalization_2 (Batch (None, 2, 2, 128)         512       \n_________________________________________________________________\nactivation_2 (Activation)    (None, 2, 2, 128)         0         \n_________________________________________________________________\nflatten_1 (Flatten)          (None, 512)               0         \n_________________________________________________________________\ndense_1 (Dense)              (None, 12)                6156      \n=================================================================\nTotal params: 20,687,820\nTrainable params: 12,461,708\nNon-trainable params: 8,226,112\n_________________________________________________________________\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "8c84c400c60f0eaca879c56ddc61060277712115"
      },
      "cell_type": "code",
      "source": "#Split training data into rain set and validation set\nfrom sklearn.model_selection import train_test_split\nX_train, X_valid, Y_train, Y_valid=train_test_split(train_img,train_y,test_size=0.1, random_state=42)\n\n#Data augmentation\n'''from keras.preprocessing.image import ImageDataGenerator\ngen_train = ImageDataGenerator( \n    rotation_range=30,\n    width_shift_range=0.2,\n   height_shift_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True\n\n)\ngen_train.fit(X_train)\n\n#Train model\nfrom keras.callbacks import ModelCheckpoint\nepochs = 10\nbatch_size = 32\nmodel_checkpoint = ModelCheckpoint('weights.h5', monitor='val_loss', save_best_only=True)\n\nmodel.fit_generator(gen_train.flow(X_train, Y_train, batch_size=batch_size, shuffle=True), \n                    steps_per_epoch=(X_train.shape[0]//(4*batch_size)), \n                    epochs=epochs, \n                    validation_data=(X_valid,Y_valid),\n                    callbacks=[model_checkpoint],verbose=1)\n'''\nfrom keras.callbacks import ModelCheckpoint\nepochs = 10\nbatch_size = 32\nmodel_checkpoint = ModelCheckpoint('weights.h5', monitor='val_loss', save_best_only=True)\n\nmodel.fit(X_train,Y_train,\n          batch_size=128,\n          epochs=20,\n          verbose=1, shuffle=True, validation_data=(X_valid,Y_valid), callbacks=[model_checkpoint])",
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": "Train on 4275 samples, validate on 475 samples\nEpoch 1/20\n4275/4275 [==============================] - 78s 18ms/step - loss: 1.7820 - acc: 0.4159 - fscore: 0.3072 - val_loss: 7.2740 - val_acc: 0.2568 - val_fscore: 0.2653\nEpoch 2/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.9340 - acc: 0.6870 - fscore: 0.6431 - val_loss: 2.9769 - val_acc: 0.3726 - val_fscore: 0.3785\nEpoch 3/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.6189 - acc: 0.7906 - fscore: 0.7802 - val_loss: 4.3257 - val_acc: 0.3621 - val_fscore: 0.3607\nEpoch 4/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.4906 - acc: 0.8346 - fscore: 0.8331 - val_loss: 10.4360 - val_acc: 0.1032 - val_fscore: 0.1089\nEpoch 5/20\n4275/4275 [==============================] - 58s 13ms/step - loss: 0.3498 - acc: 0.8847 - fscore: 0.8838 - val_loss: 0.7036 - val_acc: 0.7747 - val_fscore: 0.7698\nEpoch 6/20\n4275/4275 [==============================] - 58s 13ms/step - loss: 0.2694 - acc: 0.9170 - fscore: 0.9156 - val_loss: 2.7023 - val_acc: 0.5116 - val_fscore: 0.5107\nEpoch 7/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.1774 - acc: 0.9429 - fscore: 0.9449 - val_loss: 2.1689 - val_acc: 0.5032 - val_fscore: 0.4993\nEpoch 8/20\n4275/4275 [==============================] - 58s 13ms/step - loss: 0.1446 - acc: 0.9577 - fscore: 0.9560 - val_loss: 1.4226 - val_acc: 0.6211 - val_fscore: 0.6158\nEpoch 9/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.1587 - acc: 0.9485 - fscore: 0.9488 - val_loss: 1.0229 - val_acc: 0.7221 - val_fscore: 0.7210\nEpoch 10/20\n4275/4275 [==============================] - 58s 13ms/step - loss: 0.0521 - acc: 0.9885 - fscore: 0.9886 - val_loss: 0.9655 - val_acc: 0.7389 - val_fscore: 0.7367\nEpoch 11/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.0388 - acc: 0.9911 - fscore: 0.9921 - val_loss: 0.5419 - val_acc: 0.8442 - val_fscore: 0.8471\nEpoch 12/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.0147 - acc: 0.9977 - fscore: 0.9977 - val_loss: 0.7844 - val_acc: 0.7516 - val_fscore: 0.7544\nEpoch 13/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.0107 - acc: 0.9991 - fscore: 0.9991 - val_loss: 0.4219 - val_acc: 0.8842 - val_fscore: 0.8798\nEpoch 14/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.0124 - acc: 0.9977 - fscore: 0.9978 - val_loss: 0.4405 - val_acc: 0.8674 - val_fscore: 0.8700\nEpoch 15/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.0042 - acc: 1.0000 - fscore: 1.0000 - val_loss: 0.4922 - val_acc: 0.8484 - val_fscore: 0.8513\nEpoch 16/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.0021 - acc: 1.0000 - fscore: 1.0000 - val_loss: 0.4818 - val_acc: 0.8653 - val_fscore: 0.8672\nEpoch 17/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.0014 - acc: 1.0000 - fscore: 1.0000 - val_loss: 0.4551 - val_acc: 0.8674 - val_fscore: 0.8660\nEpoch 18/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 0.0012 - acc: 1.0000 - fscore: 1.0000 - val_loss: 0.4690 - val_acc: 0.8716 - val_fscore: 0.8741\nEpoch 19/20\n4275/4275 [==============================] - 58s 13ms/step - loss: 0.0011 - acc: 1.0000 - fscore: 1.0000 - val_loss: 0.4588 - val_acc: 0.8884 - val_fscore: 0.8876\nEpoch 20/20\n4275/4275 [==============================] - 57s 13ms/step - loss: 8.7171e-04 - acc: 1.0000 - fscore: 1.0000 - val_loss: 0.4579 - val_acc: 0.8905 - val_fscore: 0.8868\n",
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/plain": "<keras.callbacks.History at 0x7f681816ebe0>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "35092f5cb638cf5a5c447906d7039e38c6a52753"
      },
      "cell_type": "code",
      "source": "import matplotlib.pyplot as plt\ndef plot_model(model):\n    plots = [i for i in model.history.history.keys() if i.find('val_') == -1]\n    plt.figure(figsize=(10,10))\n\n    for i, p in enumerate(plots):\n        plt.subplot(len(plots), 2, i + 1)\n        plt.title(p)\n        plt.plot(model.history.history[p], label=p)\n        plt.plot(model.history.history['val_'+p], label='val_'+p)\n        plt.legend()\n\n    plt.show()\n    \nplot_model(model)",
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<matplotlib.figure.Figure at 0x7f680ea054e0>",
            "image/png": "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\nAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "collapsed": true,
        "_uuid": "462eeb5aa05127e083f24733b1fd559665ed5871"
      },
      "cell_type": "code",
      "source": "model.load_weights('weights.h5')",
      "execution_count": 12,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "67c0f4b294c57a1cc67c85c1ec9700b91813d96a"
      },
      "cell_type": "code",
      "source": "prob=[]\nnum=[]\ntest_img=[]\ntest_path = '../input/plant-seedlings-classification/test/'\ntest_all = fnmatch.filter(os.listdir(test_path), '*.png')\n\ntest_img=[]\nfor i in range(len(test_all)):\n    path=test_path+'/'+test_all[i]\n    temp_img=image.load_img(path,target_size=(224,224))\n    temp_img=image.img_to_array(temp_img)\n    test_img.append(temp_img) \ntest_img=np.array(test_img)    \ntest_img=preprocess_input(test_img)\n\n\ntest_labels=[]\npred=model.predict(test_img)\nnum2label =  {0:'Loose Silky-bent', 1:'Charlock',2: 'Sugar beet',3: 'Small-flowered Cranesbill',\n              4:'Common Chickweed',5: 'Common wheat',6: 'Maize', 7:'Cleavers', 8:'Scentless Mayweed',\n             9: 'Fat Hen', 10:'Black-grass', 11:'Shepherds Purse'}\nfor i in range(len(test_all)):\n    max_score =0\n    lab=-1\n    for j in range(12):\n        if pred[i][j]>max_score:\n            max_score=pred[i][j]\n            lab=j\n    test_labels.append(num2label[lab])\n\n\nd = {'file': test_all, 'species': test_labels}\ndf = pd.DataFrame(data=d)\nprint(df.head(5))",
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": "            file                    species\n0  0e8492cb1.png                      Maize\n1  b687160f5.png  Small-flowered Cranesbill\n2  fea3da57c.png                 Sugar beet\n3  f6d250856.png           Common Chickweed\n4  e73e308be.png                    Fat Hen\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "c7014974c71c9c40841c6d4bb5ef4e5bea1e9c39",
        "collapsed": true
      },
      "cell_type": "code",
      "source": "#Convert dataframe to csv\n# df.to_csv(\"submit.csv\",index=False) ",
      "execution_count": 13,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.4",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}